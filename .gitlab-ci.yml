---
stages:
  - dockerbuild-pre
  - dockerbuild
  - build
  - test
  - package
  - publish

variables:
  staticLibVersion: "20190607"
  rustVersion: "1.34.1"
  libsovtokenVersion: "0.10.0"
  indyBranch: 'stable'
  libindyVersion: "1.10.0"
  nullBranch: 'stable'
  libnullVersion: "1.10.0"
  androidSovtokenArtifact: "libsovtoken_0.10.0-201905312046-e820bba_all.zip"
  iosSovtokenArtifact: "libsovtoken_0.10.0-201905312039-e820bba_all.zip"

## - Anchors - ##
.tags_micro:
  tags:
    - docker-machine
    - micro
.tags_large:
  tags:
    - docker-machine
    - large

.build_micro:
  extends: .build_android
  tags:
    - docker-machine
    - micro

.build_large:
  extends: .build_android
  tags:
    - docker-machine
    - large

.build_android:
  image: ${CI_REGISTRY_IMAGE}/vcx-android:${CI_COMMIT_REF_SLUG}
  extends: .tags_micro
  artifacts:
    expire_in: 1 week
    paths:
      - runtime_android_build/libvcx_${ARCH}/*.so
  script:
    - vcx/ci/scripts/androidBuild.sh ${ARCH} ${indyBranch} \
      ${libindyVersion} ${nullBranch} ${libnullVersion} ${androidSovtokenArtifact}

.kaniko_large:
  extends: .kaniko_build
  tags:
    - docker-machine
    - large

.kaniko_micro:
  extends: .kaniko_build
  tags:
    - docker-machine
    - micro

.kaniko_build:
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  script:
    - if [ "$CI_COMMIT_REF_SLUG" == 'master' ]; then KANIKO_ARGS="--destination $CI_REGISTRY_IMAGE/${DOCKER_IMAGE_NAME}:latest $KANIKO_ARGS"; fi
    - echo "${KANIKO_ARGS}"
    - |
        echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" \
        > /kaniko/.docker/config.json
    - |
        echo "-----BEGIN CERTIFICATE-----
        MIIFJTCCAw2gAwIBAgIUMI0Z8YSLeRq8pZks40O3Dq2m8TIwDQYJKoZIhvcNAQEL
        BQAwGjEYMBYGA1UEAxMPRXZlcm55bSBSb290IENBMB4XDTE3MTAxMTIwMTAxMFoX
        DTQ3MTAwNDIwMTAzOVowGjEYMBYGA1UEAxMPRXZlcm55bSBSb290IENBMIICIjAN
        BgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEA1kjmtmMfLJfsqUNaco44N3brW8Vu
        b02lAeEwbxc65mwfAG8kAjW7kYhI/fDXFOYXUvoa3Dg7bFeEatdIjHOahZssGM27
        HsQZ4PfRhPE6HtXFszmDwXWuEekVxoyueTqL7ExnNZ+BRTXvPfm5nw1E7L3o3xHF
        GSOtWFCyHfKd1LwMKzAVSjxlawEZnfk3WK3NxrC4UYMlQaDme7m3rCMfO+KBQk69
        bFXsgn6/EihVeQ8T1+T8gogofzh5b4Z7kS6e6GMqotbGFg4agejkRVsIglSpaQLk
        2Ztn/MP1dwgyvO4uvplB4sxZSC2FhhovlwPETmbKsnpj020+m0+YU4FPKwjroMiH
        tP//YqiNKsLxtjhffW7XFToyy0qQttW5RMWnyx4MXs9Hwcy29gY1izeGMSzz3zV5
        HG8JSJikuYbYiGJRVS0egovkVjja6lrVk0Q4Hm5pbw4l7LYCd6bkDLMsRaS1QnWs
        9iz6XEf5SpIu1FuqHmlhj1ABehUyGIg5oC6egML3q78yk0mCW523qMFa9Kjnk871
        mmXSCn3p/3DCrwWYfpcibxtVaKyJj6ISYIcl+Zu65Uzmhf+nj56x3gkNgEOva7JS
        Xge+FxPxsaXBGyeSH09nNIoNmh/UucuzpNY2UyCpJuqXHtR5jaACSdsqNxG8tcDg
        K9v98D/DFiShghECAwEAAaNjMGEwDgYDVR0PAQH/BAQDAgEGMA8GA1UdEwEB/wQF
        MAMBAf8wHQYDVR0OBBYEFOrH4oUpB94gNDNqdGG92kdVZ3qkMB8GA1UdIwQYMBaA
        FOrH4oUpB94gNDNqdGG92kdVZ3qkMA0GCSqGSIb3DQEBCwUAA4ICAQCwjN3ggZ98
        BXT39fKkCX3FHb0++aFcIyMKWrcZIpYrl3GoZsNKZK4QNQ+uJOP8xmqgyrCoMfch
        VIGPQ0RDN/IzqCLhc/U3pDmk2hXa3xTxD3gpCQZ6Bz04KlcLfZd5jzbI741bVDyF
        a1n46bEyuqV4SsNJWI/FGokJCNcZH66njBQBaQAccZ7xB9vWU9yjIYtGQDDvSm6J
        SC2knrQri0vv4QLUSc1LS6AlWWSQxcCpcdO+OzIFGsf5bVmYN6J4R3COY5NyQ+yn
        pOSN2NOh5h3ZrYAxm3i4Il0orVLveVcTVDGeAgZUII4YLJi/01RHGqit3aCuApSh
        bzFTZ5FldFss+JX9iAhqpFDbHLgae0F3QmYEnGilt/PzO4j23QJo3FZKeruQLH7P
        L9aOgN6S2+Akbbm9YTc59yzU5TZMxANwTdaYFWFqk/8nKgZiBR1l8jnWTlWnm86A
        qVssH3DLKwiYrWSOHRzGuN5BmPXxxtKQJlwAXt0wJE3puUkaJSRo7CJQ3QNMoKDe
        OjzXc9WvkFIXr3Eui8UTiHB/WT7N4o8hmVN404akGfWE0YNwRVfWpjGdew6g0tZi
        lFnjUUk49av67um43JHcinT5NFPuleZzkjaL/D8ueOrjXQDy05rwVdgmw9pXog4B
        Tw6APXtEnjfD2H8HOpOX/7ef4gWK0O1Q7A==
        -----END CERTIFICATE-----" >> /kaniko/ssl/certs/ca-certificates.crt
    - |
        /kaniko/executor ${KANIKO_ARGS} --context $CI_PROJECT_DIR --dockerfile $CI_PROJECT_DIR/${DOCKERFILE_PATH} \
        --destination $CI_REGISTRY_IMAGE/${DOCKER_IMAGE_NAME}:${CI_COMMIT_REF_SLUG}

## - Jobs : dockerbuild-pre - ##
dockerbuild-vcx-libindy:
  stage: dockerbuild-pre
  extends: .kaniko_large
  variables:
    DOCKERFILE_PATH: vcx/ci/libindy.dockerfile
    DOCKER_IMAGE_NAME: vcx-libindy
    KANIKO_ARGS: "--build-arg RUST_VER=${rustVersion} --build-arg LIBINDY_VER=${libindyVersion} --build-arg LIBNULL_VER=${libnullVersion} --build-arg LIBSOVTOKEN_VER=${libsovtokenVersion}"
  only:
    changes:
      - .gitlab-ci.yml
      - vcx/ci/libindy.dockerfile

## - Jobs : dockerbuild - ##
dockerbuild-vcx-android:
  stage: dockerbuild
  extends: .kaniko_large
  dependencies:
    - dockerbuild-vcx-libindy
  variables:
    DOCKERFILE_PATH: vcx/wrappers/java/ci/android.dockerfile
    DOCKER_IMAGE_NAME: vcx-android
    KANIKO_ARGS: "--build-arg RUST_VER=${rustVersion}"
  only:
    changes:
      - .gitlab-ci.yml
      - vcx/ci/libindy.dockerfile
      - vcx/wrappers/java/ci/android.dockerfile
  before_script:
    - sed -i "s|^FROM.*|FROM ${CI_REGISTRY_IMAGE}/vcx-libindy:${CI_COMMIT_REF_SLUG}|g" vcx/wrappers/java/ci/android.dockerfile
    - grep '^FROM' vcx/wrappers/java/ci/android.dockerfile

dockerbuild-vcx-python:
  stage: dockerbuild
  extends: .kaniko_micro
  dependencies:
    - dockerbuild-vcx-libindy
  variables:
    DOCKERFILE_PATH: vcx/ci/python.dockerfile
    DOCKER_IMAGE_NAME: vcx-python
  only:
    changes:
      - .gitlab-ci.yml
      - vcx/ci/libindy.dockerfile
      - vcx/ci/python.dockerfile
  before_script:
    - sed -i "s|^FROM.*|FROM ${CI_REGISTRY_IMAGE}/vcx-libindy:${CI_COMMIT_REF_SLUG}|g" vcx/ci/python.dockerfile
    - grep '^FROM' vcx/ci/python.dockerfile

dockerbuild-vcx-java:
  stage: dockerbuild
  extends: .kaniko_micro
  dependencies:
    - dockerbuild-vcx-libindy
  variables:
    DOCKERFILE_PATH: vcx/wrappers/java/ci/java.dockerfile
    DOCKER_IMAGE_NAME: vcx-java
  only:
    changes:
      - .gitlab-ci.yml
      - vcx/ci/libindy.dockerfile
      - vcx/wrappers/java/ci/java.dockerfile
  before_script:
    - sed -i "s|^FROM.*|FROM ${CI_REGISTRY_IMAGE}/vcx-libindy:${CI_COMMIT_REF_SLUG}|g" vcx/wrappers/java/ci/java.dockerfile
    - grep '^FROM' vcx/wrappers/java/ci/java.dockerfile

## - Jobs : Build - ##
build-ios:
  #TODO: break tests out into another pipeline. parallelize architecture builds.
  stage: build
  tags:
    - macos
    - mojave
    - xcode10-1
  artifacts:
    expire_in: 1 week
    paths:
      - IOSBuilds/libvcxpartial/*.zip
      - IOSBuilds/libvcxpartial/*.gz
      - IOSBuilds/libvcxall/*.zip
      - IOSBuilds/libvcxall/*.gz
  script:
    - curl -s https://repo.corp.evernym.com/filely/ios/vcx-build-static-libs_${staticLibVersion}.tar.gz | tar -C ~/ -xvzf -
    - brew install rustup-init
    - echo | rustup-init
    - source ~/.bash_profile
    - mkdir -p ~/IOSBuilds/libvcxpartial/ ~/IOSBuilds/libvcxall/
    - cd vcx/libvcx && ./../ci/scripts/cargo-update-version
    - export vcxRevision=$(git rev-parse --short HEAD)
    - cd -
    - export vcxVersion=$(./vcx/ci/scripts/toml_utils.py ${PWD}/vcx/libvcx/Cargo.toml)
    - export full_vcx_version="${vcxVersion}-${vcxRevision}"
    - chmod +x vcx/ci/scripts/iosBuild.sh
    - vcx/ci/scripts/iosBuild.sh ${indyBranch} ${libindyVersion} ${nullBranch} \
      ${libnullVersion} ${iosSovtokenArtifact} ${rustVersion} ${full_vcx_version}
    - mv ~/IOSBuilds ./

build-android-x86:
  stage: build
  extends: .build_large
  variables:
    ARCH: 'x86'

build-android-x86_64:
  stage: build
  extends: .build_large
  variables:
    ARCH: 'x86_64'

build-android-arm:
  stage: build
  extends: .build_large
  variables:
    ARCH: 'arm'

build-android-arm64:
  stage: build
  extends: .build_large
  variables:
    ARCH: 'arm64'

build-android-armv7:
  stage: build
  extends: .build_large
  variables:
    ARCH: 'armv7'

build-libvcx:
  stage: build
  image: ${CI_REGISTRY_IMAGE}/vcx-libindy:${CI_COMMIT_REF_SLUG}
  extends: .tags_large
  variables:
    RUSTTESTFLAG: 'test'
  artifacts:
    expire_in: 1 week
    paths:
      - output/*
  script:
    - mkdir -p ${CI_PROJECT_DIR}/output
    - cd vcx/libvcx && ./../ci/scripts/cargo-update-version
    - export VCXREVISION=$(git rev-parse --short HEAD)
    - export VCXVERSION=$(${CI_PROJECT_DIR}/vcx/ci/scripts/toml_utils.py ${CI_PROJECT_DIR}/vcx/libvcx/Cargo.toml)
    - cd ${CI_PROJECT_DIR}
    - apt-get update && apt-get install -y libindy=${libindyVersion} libsovtoken=${libsovtokenVersion}
    - vcx/ci/scripts/package.sh ${RUSTTESTFLAG} ${VCXVERSION} ${VCXREVISION}

## - Jobs : Test - ##
test-python-wrapper:
  stage: test
  image: ${CI_REGISTRY_IMAGE}/vcx-python:${CI_COMMIT_REF_SLUG}
  extends: .tags_micro
  before_script:
    - export PYTHONPATH="${CI_PROJECT_DIR}/vcx/wrappers/python3:vcx/wrappers/python3"
  dependencies:
    - build-libvcx
  script:
    - sudo dpkg -i ${CI_PROJECT_DIR}/output/libvcx_*.deb
    - vcx/wrappers/python3/ci/test.sh

test-java-wrapper:
  stage: test
  image: ${CI_REGISTRY_IMAGE}/vcx-java:${CI_COMMIT_REF_SLUG}
  extends: .tags_micro
  dependencies:
    - build-libvcx
  script:
    - sudo dpkg -i ${CI_PROJECT_DIR}/output/libvcx_*.deb
    - cd vcx/wrappers/java && ./gradlew --no-daemon test

test-node-wrapper:
  stage: test
  image: ${CI_REGISTRY_IMAGE}/vcx-libindy:${CI_COMMIT_REF_SLUG}
  extends: .tags_micro
  dependencies:
    - build-libvcx
  script:
    - sudo dpkg -i ${CI_PROJECT_DIR}/output/libvcx_*.deb
    - cd vcx/wrappers/node && npm i npm@6.1.0
    - cd ${CI_PROJECT_DIR} && vcx/wrappers/node/ci/test.sh

## - Jobs : Package - ##
package-android:
  stage: package
  image: ${CI_REGISTRY_IMAGE}/vcx-android:${CI_COMMIT_REF_SLUG}
  extends: .tags_large
  artifacts:
    expire_in: 1 week
    paths:
      - vcx/wrappers/java/artifacts/aar/*.aar
  script:
    - ls -al vcx/ci/scripts/androidPackage.sh
    - sudo chmod +x vcx/ci/scripts/androidPackage.sh
    - vcx/ci/scripts/androidPackage.sh

package-python-wrapper:
  stage: package
  image: ${CI_REGISTRY_IMAGE}/vcx-python:${CI_COMMIT_REF_SLUG}
  extends: .tags_micro
  artifacts:
    expire_in: 1 week
    paths:
      - output/*
  dependencies:
    - build-libvcx
  script:
    - sudo dpkg -i ${CI_PROJECT_DIR}/output/libvcx_*.deb
    - vcx/wrappers/python3/ci/package.sh

package-java-wrapper:
  stage: package
  image: ${CI_REGISTRY_IMAGE}/vcx-java:${CI_COMMIT_REF_SLUG}
  extends: .tags_micro
  artifacts:
    expire_in: 1 week
    paths:
      - output/*
  dependencies:
    - build-libvcx
  script:
    - sudo dpkg -i ${CI_PROJECT_DIR}/output/libvcx_*.deb
    - vcx/wrappers/java/ci/buildJar.sh $(python3 vcx/ci/scripts/toml_utils.py vcx/libvcx/Cargo.toml)

package-node-wrapper:
  stage: package
  image: ${CI_REGISTRY_IMAGE}/vcx-libindy:${CI_COMMIT_REF_SLUG}
  extends: .tags_micro
  artifacts:
    expire_in: 1 week
    paths:
      - output/*
  dependencies:
    - build-libvcx
  script:
    - sudo dpkg -i ${CI_PROJECT_DIR}/output/libvcx_*.deb
    - vcx/wrappers/node/ci/package.sh

## - Jobs : Publish - ##
publish-android:
  stage: publish
  image: ${CI_REGISTRY_IMAGE}/vcx-android:${CI_COMMIT_REF_SLUG}
  extends: .tags_micro
  only:
    refs:
      - master@dev/vcx/indy-sdk
  script:
    - cp ${CLOUDREPO_SETTINGS_XML} ./settings.xml
    - sudo chmod +x vcx/ci/scripts/androidPublish.sh
    - vcx/ci/scripts/androidPublish.sh ${vcxVersion}-${vcxRevision}

publish-ios:
  stage: publish
  image: ${CI_REGISTRY_IMAGE}/vcx-libindy:${CI_COMMIT_REF_SLUG}
  extends: .tags_micro
  only:
    refs:
      - master@dev/vcx/indy-sdk
  dependencies:
    - build-ios
  script:
    - find ./IOSBuilds/libvcxpartial/ -type f -name 'vcx.libvcxpartial_*_universal.zip' \
      -exec curl -u "${KRAKEN_CREDENTIALS}" -X POST https://kraken.corp.evernym.com/repo/ios/upload -F 'file=@{}' \;
    - find ./IOSBuilds/libvcxpartial/ -type f -name 'libvcx.a.libvcxpartial_*_universal.tar.gz' \
      -exec curl -u "${KRAKEN_CREDENTIALS}" -X POST https://kraken.corp.evernym.com/repo/ios/upload -F 'file=@{}' \;
    - find ./IOSBuilds/libvcxall/ -type f -name 'vcx.libvcxall_*_universal.zip' \
      -exec curl -u "${KRAKEN_CREDENTIALS}" -X POST https://kraken.corp.evernym.com/repo/ios/upload -F 'file=@{}' \;
    - find ./IOSBuilds/libvcxall/ -type f -name 'libvcx.a.libvcxall_*_universal.tar.gz' \
      -exec curl -u "${KRAKEN_CREDENTIALS}" -X POST https://kraken.corp.evernym.com/repo/ios/upload -F 'file=@{}' \;


publish-packages:
  stage: publish
  image: ${CI_REGISTRY_IMAGE}/vcx-libindy:${CI_COMMIT_REF_SLUG}
  extends: .tags_micro
  only:
    refs:
      - master@dev/vcx/indy-sdk
  script:
    - ls -al ${CI_PROJECT_DIR}/output
    - vcx/ci/scripts/publish.sh "${KRAKEN_CREDENTIALS}" output/libvcx*.deb https://kraken.corp.evernym.com/repo/portal_dev/upload
    - vcx/ci/scripts/publish.sh "${KRAKEN_CREDENTIALS}" output/libvcx*.deb https://kraken.corp.evernym.com/repo/agency_dev/upload
    - vcx/ci/scripts/publish.sh "${KRAKEN_CREDENTIALS}" output/node-vcx-*.tgz https://kraken.corp.evernym.com/repo/npm/upload
    - vcx/ci/scripts/publish.sh "${KRAKEN_CREDENTIALS}" output/python3-vcx-*.tar.gz https://kraken.corp.evernym.com/repo/python/upload
